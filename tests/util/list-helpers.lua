-- stubs
require("stubs.misc")
require("stubs.player")
require("stubs.createframe")
require("stubs.chatinfo")
-- libs
require("LibStub")
require("AceDB-3dot0.AceDB-3dot0")
require("AceSerializer-3dot0.AceSerializer-3dot0")
-- addon
ClassicWoT = {}
_G.ClassicWoT = ClassicWoT
require("config")
require("defaultdb")
require("util.chat")
require("util.list-helpers")
require("util.table-helpers")
require("util.util")

describe("list helpers", function()
    describe("reduce", function()
        it("can sum ints", function()
            assert.equals(ClassicWoT.list.reduce({ 1, 2, 3 }, function(v, carry)
                return carry + v
            end), 6)
        end)
        it("can sum ints with base", function()
            assert.equals(ClassicWoT.list.reduce({ 1, 2, 3 }, function(v, carry)
                return carry + v
            end, 1), 7)
        end)
        it("can sum objects", function()
            assert.equals(ClassicWoT.list.reduce({ { score = 1 }, { score = 2 }, { score = 3 } }, function(v, carry)
                return carry + v["score"]
            end, 1), 7)
        end)
    end)

    describe("sum", function()
        it("can sum ints", function()
            assert.equals(ClassicWoT.list.sum({ 1, 2, 3 }), 6)
        end)
        it("can sum floats", function()
            assert.equals(ClassicWoT.list.sum({ 1.1, 2.2, 3.3 }), 6.6)
        end)
    end)

    describe("cnt", function()
        it("can cnt ints", function()
            assert.equals(ClassicWoT.list.cnt({ 1, 2, 3 }), 3)
            assert.equals(ClassicWoT.list.cnt({ 3, 2, 1 }), 3)
            assert.equals(ClassicWoT.list.cnt({ 1, 3, 2 }), 3)
            assert.equals(ClassicWoT.list.cnt({ 2, 3, 1 }), 3)
        end)
        it("can cnt floats", function()
            assert.equals(ClassicWoT.list.cnt({ 3.3, 3.3, 2.4 }), 3)
        end)
    end)

    describe("avg", function()
        it("can avg ints", function()
            assert.equals(ClassicWoT.list.avg({ 1, 2, 3 }), 2)
            assert.equals(ClassicWoT.list.avg({ 3, 2, 1 }), 2)
            assert.equals(ClassicWoT.list.avg({ 1, 3, 2 }), 2)
            assert.equals(ClassicWoT.list.avg({ 2, 3, 1 }), 2)
        end)
        it("can avg floats", function()
            assert.equals(ClassicWoT.list.cnt({ 3.3, 3.3, 2.4 }), 3)
            assert.equals(ClassicWoT.list.sum({ 3.3, 3.3, 2.4 }), 9.0)
            assert.equals(ClassicWoT.list.avg({ 3.3, 3.3, 2.4 }), 3.0)
        end)
    end)

    describe("min", function()
        it("can min ints", function()
            assert.equals(ClassicWoT.list.min({ 1, 2, 3 }), 1)
            assert.equals(ClassicWoT.list.min({ 3, 2, 1 }), 1)
            assert.equals(ClassicWoT.list.min({ 1, 3, 2 }), 1)
            assert.equals(ClassicWoT.list.min({ 2, 3, 1 }), 1)
        end)
        it("can min floats", function()
            assert.equals(ClassicWoT.list.min({ 1.1, 2.2, 3.3 }), 1.1)
            assert.equals(ClassicWoT.list.min({ 3.3, 2.2, 1.1 }), 1.1)
            assert.equals(ClassicWoT.list.min({ 1.1, 3.3, 2.2 }), 1.1)
            assert.equals(ClassicWoT.list.min({ 2.2, 3.3, 1.1 }), 1.1)
        end)
    end)

    describe("max", function()
        it("can max ints", function()
            assert.equals(ClassicWoT.list.max({ 1, 2, 3 }), 3)
            assert.equals(ClassicWoT.list.max({ 3, 2, 1 }), 3)
            assert.equals(ClassicWoT.list.max({ 1, 3, 2 }), 3)
            assert.equals(ClassicWoT.list.max({ 2, 3, 1 }), 3)
        end)
        it("can max floats", function()
            assert.equals(ClassicWoT.list.max({ 1.1, 2.2, 3.3 }), 3.3)
            assert.equals(ClassicWoT.list.max({ 3.3, 2.2, 1.1 }), 3.3)
            assert.equals(ClassicWoT.list.max({ 1.1, 3.3, 2.2 }), 3.3)
            assert.equals(ClassicWoT.list.max({ 2.2, 3.3, 1.1 }), 3.3)
        end)
    end)

    describe("cntsumminmax", function()
        it("can cntsumminmax ints", function()
            local cnt, sum, min, max = ClassicWoT.list.cntsumminmax({ 1, 2, 3 })
            assert.equals(cnt, 3)
            assert.equals(sum, 6)
            assert.equals(min, 1)
            assert.equals(max, 3)
            local cnt, sum, min, max = ClassicWoT.list.cntsumminmax({ 3, 2, 1 })
            assert.equals(cnt, 3)
            assert.equals(sum, 6)
            assert.equals(min, 1)
            assert.equals(max, 3)
            local cnt, sum, min, max = ClassicWoT.list.cntsumminmax({ 1, 3, 2 })
            assert.equals(cnt, 3)
            assert.equals(sum, 6)
            assert.equals(min, 1)
            assert.equals(max, 3)
            local cnt, sum, min, max = ClassicWoT.list.cntsumminmax({ 2, 3, 1 })
            assert.equals(cnt, 3)
            assert.equals(sum, 6)
            assert.equals(min, 1)
            assert.equals(max, 3)
        end)
    end)
end)
